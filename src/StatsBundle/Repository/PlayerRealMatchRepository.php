<?php

namespace StatsBundle\Repository;

/**
 * PlayerRealMatchRepository
 *
 * This clASs wAS generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlayerRealMatchRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * fetchPlayerData
     * to be used for PHP processing
     *
     * @param array  $playerIds the player ids
     * @param String $season    the season
     *
     * @return array
     */
    public function fetchPlayerData($playerIds = array(), $season = null)
    {
        $qb = $this->createQueryBuilder('prm')
            ->select(
                "prm.realMatchId,
                rm.season,
                rm.week,
                prm.playerId,
                p.lastname,
                prm.hasStarted,
                prm.hasEntered,
                prm.goals,
                prm.ownGoals,
                prm.rating,
                prm.yellowCards,
                prm.redCard,
                prm.wasPreserved,
                prm.wasInjured,
                prm.wasUnavailable,
                prm.wasSuspended"
            );
        if (!empty($playerIds)) {
            $qb->where('prm.playerId IN (:playerIds)')
                ->setParameter('playerIds', $playerIds);
        }
        if (!is_null($season)) {
            $qb->andWhere('rm.season = :season')->setParameter('season', $season);
        }
        $qb->innerJoin('prm.real_match', 'rm')
            ->innerJoin('prm.player', 'p')
            ->orderBy('prm.playerId', 'ASC')
            ->addOrderBy('rm.season', 'DESC')
            ->addOrderBy('rm.week', 'DESC');
        return $qb->getQuery()->getResult();
    }

    /**
     * getAggregatedStats for a player
     * These fucking 5-10-20_@ averages was the WORST idea ever
     * Data will still need to be post-aggregated later
     *
     * @param String  $week     the week
     * @param Integer $playerId the player ID
     * @param String  $season   the season
     *
     * @return array
     */
    public function getAggregatedStats($week, $playerId, $season = null)
    {
        $qb = $this->createQueryBuilder('prm')
            ->select(
                "rm.season,
                prm.playerId,
                p.lastname"
            )
            ->addSelect('SUM(prm.hasStarted) AS hasStarted')
            ->addSelect('SUM(prm.hasEntered) AS hasEntered')
            ->addSelect('SUM(prm.yellowCards) AS yellowCards')
            ->addSelect('SUM(prm.redCard) AS redCard')
            ->addSelect('SUM(prm.goals) AS goals')
            ->addSelect('SUM(prm.ownGoals) AS ownGoals')
            ->addSelect('AVG(prm.rating) AS avgRating')
            ->addSelect('MIN(rm.week) AS from_week')
            ->addSelect('MAX(rm.week) AS to_week')
            ->addSelect('CASE WHEN rm.week > :recentWeek THEN 1 ELSE 0 END AS last5')
            ->setParameter('recentWeek', $week-5)
            ->addSelect('CASE WHEN rm.week > :midWeek THEN 1 ELSE 0 END AS last10')
            ->setParameter('midWeek', $week-10)
            ->addSelect('CASE WHEN rm.week > :oldWeek THEN 1 ELSE 0 END AS last20')
            ->setParameter('oldWeek', $week-20)
            ->addSelect('COUNT(1) as played')
            ->addSelect('SUM(prm.wasInjured) AS wasInjured')
            ->addSelect('SUM(prm.wasPreserved) AS wasPreserved')
            ->addSelect('SUM(prm.wasSuspended) AS wasSuspended')
            ->addSelect('SUM(prm.wasUnavailable) AS wasUnavailable')
            ->innerJoin('prm.player', 'p')
            ->innerJoin('prm.real_match', 'rm')
            ->where('prm.playerId = :playerId')
            ->setParameter('playerId', $playerId);
        if (!is_null($season)) {
            $qb->andWhere('rm.season = :season')->setParameter('season', $season);
        }
        $qb->groupBy('rm.season')
            ->addGroupBy('last20')
            ->addGroupBy('last10')
            ->addGroupBy('last5');
        return $qb->getQuery()->getResult();
    }

    /**
     * Fetches basic data about the 6 last games of a given player
     * 
     * @param integer $playerId the player ID
     * 
     * @return array
     */
    public function getLG6($playerId)
    {
        $qb = $this->createQueryBuilder('prm')
            ->select(
                "prm.realMatchId,
                rm.season,
                rm.week,
                prm.playerId,
                prm.hasStarted,
                prm.hasEntered,
                prm.goals,
                prm.ownGoals,
                prm.rating,
                prm.yellowCards,
                prm.redCard,
                prm.wasPreserved,
                prm.wasInjured,
                prm.wasUnavailable,
                prm.wasSuspended"
            )
            ->innerJoin('prm.real_match', 'rm')
            ->where('prm.playerId = :playerId')
            ->setParameter('playerId', $playerId)
            ->orderBy('rm.season', 'DESC')
            ->addOrderBy('rm.week', 'DESC')
            ->setMaxResults(6);
        return $qb->getQuery()->getResult();
    }
}
